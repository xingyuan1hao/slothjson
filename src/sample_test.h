////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by slothjson. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
#ifndef __sample_test_20160601115702_h__
#define __sample_test_20160601115702_h__

#include "slothjson.h"

namespace slothjson {

struct sample_struct_t
{
    bool bool_val;
    std::string str_val;
    int32_t int_val;
    uint32_t uint_val;
    double double_val;
    int8_t char_val;
    uint8_t uchar_val;
    int16_t short_val;
    uint16_t ushort_val;
    int64_t int64_val;
    uint64_t uint64_val;
    float float_val;
    std::vector<int32_t > vec_val;
    std::map<std::string, std::string > str_map_val;

    void skip_bool_val() { __skip_bool_val = true; }
    void skip_str_val() { __skip_str_val = true; }
    void skip_int_val() { __skip_int_val = true; }
    void skip_uint_val() { __skip_uint_val = true; }
    void skip_double_val() { __skip_double_val = true; }
    void skip_char_val() { __skip_char_val = true; }
    void skip_uchar_val() { __skip_uchar_val = true; }
    void skip_short_val() { __skip_short_val = true; }
    void skip_ushort_val() { __skip_ushort_val = true; }
    void skip_int64_val() { __skip_int64_val = true; }
    void skip_uint64_val() { __skip_uint64_val = true; }
    void skip_float_val() { __skip_float_val = true; }
    void skip_vec_val() { __skip_vec_val = true; }
    void skip_str_map_val() { __skip_str_map_val = true; }

    bool json_has_bool_val() const { return __json_has_bool_val; }
    bool json_has_str_val() const { return __json_has_str_val; }
    bool json_has_int_val() const { return __json_has_int_val; }
    bool json_has_uint_val() const { return __json_has_uint_val; }
    bool json_has_double_val() const { return __json_has_double_val; }
    bool json_has_char_val() const { return __json_has_char_val; }
    bool json_has_uchar_val() const { return __json_has_uchar_val; }
    bool json_has_short_val() const { return __json_has_short_val; }
    bool json_has_ushort_val() const { return __json_has_ushort_val; }
    bool json_has_int64_val() const { return __json_has_int64_val; }
    bool json_has_uint64_val() const { return __json_has_uint64_val; }
    bool json_has_float_val() const { return __json_has_float_val; }
    bool json_has_vec_val() const { return __json_has_vec_val; }
    bool json_has_str_map_val() const { return __json_has_str_map_val; }

    sample_struct_t();
    sample_struct_t& operator=(const sample_struct_t& obj_val);
    bool operator==(const sample_struct_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);

private:
    bool __skip_bool_val;
    bool __skip_str_val;
    bool __skip_int_val;
    bool __skip_uint_val;
    bool __skip_double_val;
    bool __skip_char_val;
    bool __skip_uchar_val;
    bool __skip_short_val;
    bool __skip_ushort_val;
    bool __skip_int64_val;
    bool __skip_uint64_val;
    bool __skip_float_val;
    bool __skip_vec_val;
    bool __skip_str_map_val;

    bool __json_has_bool_val;
    bool __json_has_str_val;
    bool __json_has_int_val;
    bool __json_has_uint_val;
    bool __json_has_double_val;
    bool __json_has_char_val;
    bool __json_has_uchar_val;
    bool __json_has_short_val;
    bool __json_has_ushort_val;
    bool __json_has_int64_val;
    bool __json_has_uint64_val;
    bool __json_has_float_val;
    bool __json_has_vec_val;
    bool __json_has_str_map_val;
};

bool encode(const sample_struct_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, sample_struct_t& obj_val);

} // namespace slothjson

#endif // __sample_test_20160601115702_h__